name: CD-Edge
run-name: Deploy to Edge

on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  build_app:
    name: Gradle Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: "8.10"

      - name: Run Gradle Wrapper
        run: gradle wrapper

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Save build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gradle_build
          path: build
          retention-days: 1

  build_docker:
    name: Docker Build
    needs: build_app
    environment: central
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build_push_docker.outputs.digest }}

    steps:
      - name: Checkout only Dockerfile
        uses: actions/checkout@v4
        with:
          sparse-checkout: Dockerfile
          sparse-checkout-cone-mode: false

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: gradle_build
          path: build

      - name: Configure AWS Credentials for image push
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}

      - name: Login to ECR Central
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id  : build_push_docker
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ vars.ECR_REGISTRY }}/${{ vars.ECR_REPOSITORY }}:latest

  deploy_to_edge:
    name: Deploy to Edge
    runs-on: ubuntu-latest
    needs: build_docker
    environment: edge
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}

      - name: Update Image Digest to SSM Parameter
        if: ${{ needs.build_docker.outputs.digest != '' }}
        run: |
          aws ssm put-parameter \
            --name "/apps/oceancurrent/edge/image_digest" \
            --type "String" \
            --value "$digest" \
            --overwrite
        env:
          digest: ${{ needs.build_docker.outputs.digest }}

      - name: Generate App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.DEPLOY_APP_ID }}
          private-key: ${{ secrets.DEPLOY_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: "appdeploy"

      - name: Trigger Deploy Workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          retries: 3
          retry-exempt-status-codes: 204
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: 'aodn',
              repo: 'appdeploy',
              workflow_id: 'deploy.yml',
              ref: 'main',
              inputs: {
                app_name: 'oceancurrent',
                environment: 'edge'
              }
            })
